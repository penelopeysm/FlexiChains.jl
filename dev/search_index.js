var documenterSearchIndex = {"docs":
[{"location":"data_structure/#Core-data-structure","page":"Core data structure","title":"Core data structure","text":"","category":"section"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"Fundamentally, a FlexiChain{T} is a mapping of keys to values.","category":"page"},{"location":"data_structure/#FlexiChains.FlexiChain","page":"Core data structure","title":"FlexiChains.FlexiChain","text":"FlexiChain{TKey,NIter,NChains,Sections}\n\nTODO: Document further.\n\nFields\n\n_data::Dict{<:FlexiChainKey{TKey}, <:FlexiChains.SizedMatrix{NIter, NChains}} where {TKey, NIter, NChains}: Internal data. Do not access this directly unless you know what you are doing! You should use the interface methods defined instead.\n\n\n\n\n\n","category":"type"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"The values must be matrices or vectors that all have the same size. The element type is unconstrained.","category":"page"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"The keys must be one of two types:","category":"page"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"Parameter(::T): a parameter of the Markov chain itself\nOtherKey(::Symbol, ::Any): a key that is not a parameter, such as metadata. The Symbol argument identifies a section which the key belongs to, thus allowing for multiple keys to be grouped together in meaningful ways.","category":"page"},{"location":"data_structure/#FlexiChains.Parameter","page":"Core data structure","title":"FlexiChains.Parameter","text":"Parameter(name)\n\nA named parameter in a FlexiChain. The name can be of any type, but all parameters in a FlexiChain must have the same type for their names.\n\nSpecifically, if you have a FlexiChain{TKey}, then all parameters must be of type Parameter{TKey}.\n\n\n\n\n\n","category":"type"},{"location":"data_structure/#FlexiChains.OtherKey","page":"Core data structure","title":"FlexiChains.OtherKey","text":"OtherKey(section_name::Symbol, key_name::Any)\n\nA key in a FlexiChain that is not a parameter. FlexiChain allows for such informations to be grouped into sections, which are identified by Symbols. The name of the key itself can be of any type and is not constrained by the type of the FlexiChain.\n\n\n\n\n\n","category":"type"},{"location":"data_structure/#FlexiChains.FlexiChainKey","page":"Core data structure","title":"FlexiChains.FlexiChainKey","text":"FlexiChainKey{T}\n\nEither a Parameter{T}, or an OtherKey.\n\nAll keys in a FlexiChain{T} must be a FlexiChainKey{T}.\n\n\n\n\n\n","category":"type"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"Bearing this in mind, there are two ways to construct a FlexiChain. One is to pass an array of dictionaries (i.e., one dictionary per iteration); the other is to pass a dictionary of arrays (i.e., the values for each key are already grouped together).","category":"page"},{"location":"data_structure/#FlexiChains.FlexiChain-Union{Tuple{Any}, Tuple{TKey}} where TKey","page":"Core data structure","title":"FlexiChains.FlexiChain","text":"FlexiChain{TKey}(\n    array_of_dicts::AbstractArray{<:AbstractDict,N}\n) where {TKey,N}\n\nConstruct a FlexiChain from a vector or matrix of dictionaries. Each dictionary corresponds to one iteration.\n\nEach dictionary must be a mapping from a FlexiChainKey{TKey} (i.e., either a Parameter{TKey} or an OtherKey) to its value at that iteration.\n\nIf array_of_dicts is a vector (i.e., N = 1), then niter is the length of the vector and nchains is 1. If array_of_dicts is a matrix (i.e., N = 2), then (niter, nchains) = size(dicts).\n\nOther values of N will error.\n\nExample usage\n\nd = fill(\n    Dict(Parameter(:x) => rand(), OtherKey(:section, \"y\") => rand()), 200, 3\n)\nchn = FlexiChain{Symbol}(d)\n\n\n\n\n\nFlexiChain{TKey}(\n    dict_of_arrays::AbstractDict{<:Any,<:AbstractArray{<:Any,N}}\n) where {TKey,N}\n\nConstruct a FlexiChain from a dictionary of arrays.\n\nEach key in the dictionary must subtype FlexiChainKey{TKey} (i.e., it is either a Parameter{TKey} or an OtherKey). The values of the dictionary must all be of the same size.\n\nIf the values are vectors (i.e., N = 1), then niters will be the length of the vector, and nchains will be 1. If the values are matrices (i.e., N = 2), then (niter, nchains) = size(array).\n\nOther values of N will error.\n\nExample usage\n\nd = Dict(\n    Parameter(:x) => rand(200, 3),\n    OtherKey(:section, \"y\") => rand(200, 3),\n)\nchn = FlexiChain{Symbol}(d)\n\n\n\n\n\n","category":"method"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"Note that, although the dictionaries themselves may have loose types, the key type of the FlexiChain must be specified (and the keys of the dictionaries will be checked against this).","category":"page"},{"location":"data_structure/#Accessing-values","page":"Core data structure","title":"Accessing values","text":"","category":"section"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"Indexing into a FlexiChain can be done in two ways:","category":"page"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"using Symbol, which is a lossy operation but more convenient;\ndirectly using Parameter or OtherKey, which is most faithful to the underlying data structure;","category":"page"},{"location":"data_structure/#Base.getindex-Tuple{FlexiChain, Symbol}","page":"Core data structure","title":"Base.getindex","text":"Base.getindex(chain::FlexiChain{TKey}, sym_key::Symbol) where {TKey}\n\nThe most convenient method to index into a FlexiChain is using Symbol.\n\nHowever, recall that the keys in a FlexiChain{TKey} are not stored as Symbols but rather as either Parameter{TKey} or OtherKey. Thus, to access the data corresponding to a Symbol, we first convert all key names (both parameters and other keys) to Symbols, and then check if there is a unique match.\n\nIf there is, then we can return that data. If there are no valid matches, then we throw a KeyError.\n\nIf there are multiple matches: for example, if you have a Parameter(:x) and also an OtherKey(:some_section, :x), then this method will also throw a KeyError. You will then have to index into it using the actual key.\n\n\n\n\n\n","category":"method"},{"location":"data_structure/#Base.getindex-Union{Tuple{TKey}, Tuple{FlexiChain{TKey}, FlexiChainKey{TKey}}} where TKey","page":"Core data structure","title":"Base.getindex","text":"Base.getindex(chain::FlexiChain{TKey}, key::FlexiChainKey{TKey}) where {TKey}\n\nUnambiguously access the data corresponding to the given key in the chain.\n\nYou will need to use this method if you have multiple keys that convert to the same Symbol, such as a Parameter(:x) and an OtherKey(:some_section, :x).\n\n\n\n\n\n","category":"method"},{"location":"data_structure/","page":"Core data structure","title":"Core data structure","text":"For convenience when accessing non-parameter keys, you can also use:","category":"page"},{"location":"data_structure/#Base.getindex-Union{Tuple{TKey}, Tuple{FlexiChain{TKey}, Symbol, Any}} where TKey","page":"Core data structure","title":"Base.getindex","text":"Base.getindex(chain::FlexiChain{TKey}, section_name::Symbol, key_name::Symbol) where {TKey}\n\nConvenience method for chain[OtherKey(section_name, key_name)].\n\n\n\n\n\n","category":"method"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"FlexiChains.jl provides an information-rich data structure for Markov chains.","category":"page"},{"location":"mcmcchains/#Migrating-from-MCMCChains.jl","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"FlexiChains.jl has been designed from the ground up to address existing limitations of MCMCChains.jl.","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"This page describes some key differences from MCMCChains.jl and how you can migrate your code to use FlexiChains.jl.","category":"page"},{"location":"mcmcchains/#The-fundamental-difference","page":"Migrating from MCMCChains.jl","title":"The fundamental difference","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"Under the hood, MCMCChains.jl uses AxisArrays.AxisArray as its data structure. Specifically, this allows it to store data in a compact 3-dimensional matrix, and index into the matrix using Symbols.","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"The downside of this is that it enforces a key type of Symbol and a value type of Tval<:Real. This means that, for example, if you have a model with vector-valued parameters (like x above), the vectors will be split up into their individual elements before being stored in the chain.","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"This is the core of how MCMCChains and FlexiChains differ, and all of the behaviour shown below stems from this.","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"To illustrate this, let's sample from a typical Turing model and store the results in both MCMCChains.Chains and FlexiChains.FlexiChain.","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"# using Turing, MCMCChains, FlexiChains, Random\n# \n# @model function f(x)\n#     chol ~ LKJCholesky(3, 1.0)\n#     corr := PDMats.PDMat(chol)\n#     mu ~ MvNormal(zeros(3), I)\n#     x ~ MvNormal(mu, corr)\n# end\n#\n# model = f(randn(Xoshiro(468), 3))\n# mcmc = sample(Xoshiro(468), model, NUTS(), 100; chain_type=MCMCChains.Chains)\n# flexi = sample(Xoshiro(468), model, NUTS(), 100; chain_type=FlexiChains.FlexiChain)","category":"page"},{"location":"mcmcchains/#Accessing-vector-valued-parameters","page":"Migrating from MCMCChains.jl","title":"Accessing vector-valued parameters","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"Blah","category":"page"},{"location":"mcmcchains/#Accessing-individual-elements","page":"Migrating from MCMCChains.jl","title":"Accessing individual elements","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"Blah","category":"page"},{"location":"mcmcchains/#Accessing-'generated-quantities'-(using-:)","page":"Migrating from MCMCChains.jl","title":"Accessing 'generated quantities' (using :=)","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"Blah","category":"page"},{"location":"mcmcchains/#No-need-to-avoid-reserved-names","page":"Migrating from MCMCChains.jl","title":"No need to avoid reserved names","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"When sampling from a Turing model with MCMCChains as the output format, some metadata (non-parameter keys) such as lp are added to the chain. If your model contains a variable called lp, sampling will still work but odd things will happen. HMC samplers further include extra metadata such as hamiltonian_energy, and in general any sampler can include any kind of extra metadata it wants. As a user, you have no way of knowing what these names are, and you have to avoid using them in your model, which is quite unfair.","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"(demo)","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"FlexiChains circumvents this entirely since it stores these separately as Parameter(@varname(lp)) and OtherKey(:stats, :lp). Again, you will run into ambiguities if you simply attempt to index the chain with [:lp]:","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"(demo)","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"but you can still access the value using the original Parameter:","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"(demo)","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"and this difference is also respected when pretty-printing the chain (MCMCChains simply hides the lp parameter from you because it thinks that it's an internal name).","category":"page"},{"location":"mcmcchains/#For-DynamicPPL-developers","page":"Migrating from MCMCChains.jl","title":"For DynamicPPL developers","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"Blah","category":"page"},{"location":"mcmcchains/#Design-goals","page":"Migrating from MCMCChains.jl","title":"Design goals","text":"","category":"section"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"My main design goals for FlexiChains.jl were twofold:","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"To provide a rich data structure that can more faithfully represent the outputs from sampling with Turing.jl.\nThe restriction of MCMCChains.jl to Symbol keys and Real values means that round-trip conversion is a lossy operation. Consider, e.g., the predict(::Model, ::MCMCChains.Chains) function, which is used to sample from the posterior predictive distribution. This requires one to extract the values from the chain and insert them back into the model (or technically the VarInfo).\nHowever, in general one cannot reconstruct a vector x from its constituent elements x[1], x[2], ... as we do not know the appropriate length of the vector! The current implementation of this function in DynamicPPL.jl thus has to, essentially, insert all the elements it can find and hope for the best.\nEssentially, MCMCChains' data structure forces packages like Turing.jl and DynamicPPL.jl to include workarounds to deal with the limitations of the chains package.\nTo create a robust and readable codebase.\nMuch Julia code is written with the intention of efficiency or versatility, often sacrificing clarity in the process. This is usually acceptable when creating simple scripts. However, I believe that library code should be held to a (much) higher standard.\nIn particular, I consider the overuse of multiple dispatch to be a major source of confusion in Julia code. Types cannot be fully inferred at compile time (and even when they can, it requires packages such as JET.jl, which do not (yet) have convenient language server integrations). This means that when reading code, one cannot easily determine which method is being called.\nA prime example is the Chains constructor in MCMCChains.jl. methods(Chains) returns 11 methods, and each time you see a call to Chains(...) you need to figure out which of these 11 it is. In writing FlexiChains I have made a conscious choice to create only two inner constructors for FlexiChain.","category":"page"},{"location":"mcmcchains/","page":"Migrating from MCMCChains.jl","title":"Migrating from MCMCChains.jl","text":"In particular, notice that performance is not one of my considerations. In my opinion, performance is only a minor concern for FlexiChains.jl, because the main bottleneck in Bayesian inference is the sampling, not how fast one can construct or index into a chain. I have not performed any benchmarks but I would expect that most operations on MCMCChains.Chains will be faster than on FlexiChains.FlexiChain.","category":"page"}]
}
