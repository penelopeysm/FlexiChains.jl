var documenterSearchIndex = {"docs":
[{"location":"turing/#Usage-with-Turing.jl","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"This page describes how to use FlexiChains from the perspective of a Turing.jl user.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"In particular, it does not explain 'under the hood' how FlexiChains works. Rather, it focuses on the usage of FlexiChains within a typical Bayesian inference workflow. For more detailed information about the inner workings of FlexiChains, please see Behind the scenes.","category":"page"},{"location":"turing/#Sampling","page":"Usage with Turing.jl","title":"Sampling","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"To obtain a FlexiChain from Turing.jl, you will need to specify a chain_type of FlexiChains.VNChain when performing MCMC sampling.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"Let's use a non-trivial model so that we can illustrate some features of FlexiChains.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"using Turing\nusing FlexiChains: VNChain\n\ny = [28, 8, -3, 7, -1, 1, 18, 12]\nsigma = [15, 10, 16, 11, 9, 11, 10, 18]\n@model function eight_schools(y, sigma)\n    mu ~ Normal(0, 5)\n    tau ~ truncated(Cauchy(0, 5); lower=0)\n    theta ~ MvNormal(fill(mu, length(y)), tau^2 * I)\n    for i in eachindex(y)\n        y[i] ~ Normal(theta[i], sigma[i])\n    end\n    return (mu=mu, tau=tau)\nend\nmodel = eight_schools(y, sigma)\nchain = sample(model, NUTS(), 5; chain_type=VNChain)","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"note: Note\nWe only run 5 MCMC iterations here to keep the output in the following sections small.","category":"page"},{"location":"turing/#Accessing-data","page":"Usage with Turing.jl","title":"Accessing data","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"First, notice in the printout above that a FlexiChain stores parameters and 'other keys' separately. The way to access these differs slightly.","category":"page"},{"location":"turing/#Parameters","page":"Usage with Turing.jl","title":"Parameters","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"To access parameters, the most correct way is to use VarNames to index into the chain. VarName is a data structure defined in AbstractPPL.jl, and is what Turing.jl uses to represent the name of a random variable (appearing on the left-hand side of a tilde-statement).","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"For example, this directly gives us the value of mu in each iteration as a plain old vector of floats.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"chain[@varname(mu)]","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"note: Multiple chains\nIf you sample multiple chains, e.g. with sample(model, NUTS(), MCMCThreads(), 1000, 3; chain_type=VNChain), then indexing into the FlexiChain will give you a matrix of floats instead.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"For vector-valued parameters like theta, this works in exactly the same way, except that you get a vector of vectors (note: not a matrix).","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"chain[@varname(theta)]","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"This is probably the most major difference between FlexiChains and MCMCChains. MCMCChains by default will break vector-valued parameters into multiple scalar-valued parameters called theta[1], theta[2], etc., whereas FlexiChains keeps them together as they were defined in the model.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"If you want to obtain the first element of theta, you can index into it with the corresponding VarName:","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"chain[@varname(theta[1])]","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"Note that this can only be used to 'break down', or access nested fields of, larger parameters. That is, if your model has x ~ dist, FlexiChains will let you access some field or index of x.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"However, you cannot go the other way: if your model has x[1] ~ dist you cannot 'reconstruct' x from its component elements. (Or at least, you can't do it with FlexiChains. You can still call chain[@varname(x[1])] and chain[@varname(x[2])] and then perform hcat or similar to put them together yourself.)","category":"page"},{"location":"turing/#Other-information-in-the-chain","page":"Usage with Turing.jl","title":"Other information in the chain","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"In general Turing.jl tries to package up some extra metadata into the chain that may be helpful. For example, the log-joint probability of each sample is stored with the key :lp. Notice in the FlexiChain output displayed above, this is associated with a section, labelled :logprobs. In FlexiChains, all non-parameter keys are grouped into sections.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"To access these, you need to specify both the section name and the key name.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"chain[:logprobs, :lp]","category":"page"},{"location":"turing/#Shortcuts","page":"Usage with Turing.jl","title":"Shortcuts","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"If you are used to MCMCChains.jl, you may find this more cumbersome than before. So, FlexiChains provides some shortcuts for accessing data. You can index into a FlexiChain with a single Symbol, and as long as it is unambiguous, it will return the corresponding data.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"chain[:mu] # parameter","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"note: What does unambiguous mean?\nIn this case, because the only parameter p for which Symbol(p) == :mu is @varname(mu), we can safely identify @varname(mu) as the parameter that we want.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"Likewise, we can omit the section symbol for the :lp data.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"chain[:lp] # other key","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"If there is any ambiguity present (for example if there is a parameter named lp as well), FlexiChains will throw an error.","category":"page"},{"location":"turing/#Posterior-predictions-and-friends","page":"Usage with Turing.jl","title":"Posterior predictions and friends","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"The functions predict, returned, logjoint, loglikelihood, and logprior all work 'as expected' using FlexiChains with exactly the same signatures that you are used to. Please consult the Turing.jl documentation for more details.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"returned(model, chain)","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"The pointwise_logdensity family of functions is not yet implemented.","category":"page"},{"location":"turing/#Statistics-and-plotting","page":"Usage with Turing.jl","title":"Statistics and plotting","text":"","category":"section"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"Right now FlexiChains does not (yet) provide any functionality for calculating statistics or plotting, although these are planned for the future.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"In the meantime, you can convert a FlexiChain to an MCMCChains.Chains object using the MCMCChains.Chains constructor.","category":"page"},{"location":"turing/","page":"Usage with Turing.jl","title":"Usage with Turing.jl","text":"using MCMCChains\nmcmc = MCMCChains.Chains(chain)","category":"page"},{"location":"manual/#Behind-the-scenes","page":"Behind the scenes","title":"Behind the scenes","text":"","category":"section"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"This section is intended for readers who may have to work on the package itself or its Turing.jl compatibility. This will require you to have some understanding of the internal workings of a FlexiChain.","category":"page"},{"location":"manual/#The-FlexiChain-type","page":"Behind the scenes","title":"The FlexiChain type","text":"","category":"section"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"Fundamentally, a FlexiChain{T} is a mapping of keys to arrays of values. Indeed, a FlexiChain contains a _data field which is just a dictionary.","category":"page"},{"location":"manual/#FlexiChains.FlexiChain","page":"Behind the scenes","title":"FlexiChains.FlexiChain","text":"FlexiChain{TKey,NIter,NChains,Sections}\n\nNote that the ordering of keys within a FlexiChain is an implementation detail and is not guaranteed.\n\nTODO: Document further.\n\nFields\n\n_data::Dict{<:ParameterOrExtra{TKey}, <:FlexiChains.SizedMatrix{NIter, NChains}} where {TKey, NIter, NChains}: Internal data. Do not access this directly unless you know what you are doing! You should use the interface methods defined instead.\n\n\n\n\n\n","category":"type"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"The keys must be one of two types:","category":"page"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"Parameter(::T): a parameter of the Markov chain itself\nExtra(::Symbol, ::Any): a key that is not a parameter, such as metadata. The Symbol argument identifies a section which the key belongs to, thus allowing for multiple keys to be grouped together in meaningful ways.","category":"page"},{"location":"manual/#FlexiChains.Parameter","page":"Behind the scenes","title":"FlexiChains.Parameter","text":"Parameter(name)\n\nA named parameter in a FlexiChain. The name can be of any type, but all parameters in a FlexiChain must have the same type for their names.\n\nSpecifically, if you have a FlexiChain{TKey}, then all parameters must be of type Parameter{TKey}.\n\n\n\n\n\n","category":"type"},{"location":"manual/#FlexiChains.Extra","page":"Behind the scenes","title":"FlexiChains.Extra","text":"Extra(section_name::Symbol, key_name::Any)\n\nA key in a FlexiChain that is not a parameter. FlexiChain allows for such informations to be grouped into sections, which are identified by Symbols. The name of the key itself can be of any type and is not constrained by the type of the FlexiChain.\n\n\n\n\n\n","category":"type"},{"location":"manual/#FlexiChains.ParameterOrExtra","page":"Behind the scenes","title":"FlexiChains.ParameterOrExtra","text":"ParameterOrExtra{T}\n\nEither a Parameter{T}, or an Extra.\n\nAll keys in a FlexiChain{T} must be a ParameterOrExtra{T}.\n\n\n\n\n\n","category":"type"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"The values must be matrices or vectors that all have the same size. This is represented by a FlexiChains.SizedMatrix, which carries its size as a type parameter (although the underlying storage still uses Base.Array).","category":"page"},{"location":"manual/#FlexiChains.SizedMatrix","page":"Behind the scenes","title":"FlexiChains.SizedMatrix","text":"SizedMatrix{NIter,NChains,T}\n\nA matrix type that is used to store the data in a FlexiChain. It is similar to StaticArrays.SMatrix in terms of its type behaviour, but under the hood uses plain Arrays for storage. This allows us to have type-level guarantees about the size of the matrix, without having to opt into the performance characteristics and data structures of StaticArrays.\n\nT is the element type.\n\nThe underlying data in a SizedMatrix can be accessed using data(::SizedMatrix). If the matrix has only one chain, it will be returned as a vector. If it has multiple chains, it will be returned as a matrix.\n\nFields\n\n_data::Matrix: Internal data. Do not access this directly! Use data(::SizedMatrix) instead.\n\n\n\n\n\n","category":"type"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"The element type of these arrays is unconstrained.","category":"page"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"Bearing this in mind, there are two ways to construct a FlexiChain. One is to pass an array of dictionaries (i.e., one dictionary per iteration); the other is to pass a dictionary of arrays (i.e., the values for each key are already grouped together).","category":"page"},{"location":"manual/#FlexiChains.FlexiChain-Union{Tuple{Any}, Tuple{TKey}} where TKey","page":"Behind the scenes","title":"FlexiChains.FlexiChain","text":"FlexiChain{TKey}(\n    array_of_dicts::AbstractArray{<:AbstractDict,N}\n) where {TKey,N}\n\nConstruct a FlexiChain from a vector or matrix of dictionaries. Each dictionary corresponds to one iteration.\n\nEach dictionary must be a mapping from a ParameterOrExtra{TKey} (i.e., either a Parameter{TKey} or an Extra) to its value at that iteration.\n\nIf array_of_dicts is a vector (i.e., N = 1), then niter is the length of the vector and nchains is 1. If array_of_dicts is a matrix (i.e., N = 2), then (niter, nchains) = size(dicts).\n\nOther values of N will error.\n\nExample usage\n\nd = fill(\n    Dict(Parameter(:x) => rand(), Extra(:section, \"y\") => rand()), 200, 3\n)\nchn = FlexiChain{Symbol}(d)\n\n\n\n\n\nFlexiChain{TKey}(\n    dict_of_arrays::AbstractDict{<:Any,<:AbstractArray{<:Any,N}}\n) where {TKey,N}\n\nConstruct a FlexiChain from a dictionary of arrays.\n\nEach key in the dictionary must subtype ParameterOrExtra{TKey} (i.e., it is either a Parameter{TKey} or an Extra). The values of the dictionary must all be of the same size.\n\nIf the values are vectors (i.e., N = 1), then niters will be the length of the vector, and nchains will be 1. If the values are matrices (i.e., N = 2), then (niter, nchains) = size(array).\n\nOther values of N will error.\n\nExample usage\n\nd = Dict(\n    Parameter(:x) => rand(200, 3),\n    Extra(:section, \"y\") => rand(200, 3),\n)\nchn = FlexiChain{Symbol}(d)\n\n\n\n\n\n","category":"method"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"Note that, although the dictionaries themselves may have loose types, the key type of the FlexiChain must be specified (and the keys of the dictionaries will be checked against this).","category":"page"},{"location":"manual/#Accessing-data","page":"Behind the scenes","title":"Accessing data","text":"","category":"section"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"The most unambiguous way to index into a FlexiChain is to use either Parameter or Extra.","category":"page"},{"location":"manual/#Base.getindex-Union{Tuple{TKey}, Tuple{FlexiChain{TKey}, ParameterOrExtra{TKey}}} where TKey","page":"Behind the scenes","title":"Base.getindex","text":"Base.getindex(chain::FlexiChain{TKey}, key::ParameterOrExtra{TKey}) where {TKey}\n\nUnambiguously access the data corresponding to the given key in the chain.\n\nYou will need to use this method if you have multiple keys that convert to the same Symbol, such as a Parameter(:x) and an Extra(:some_section, :x).\n\n\n\n\n\n","category":"method"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"This can be slightly verbose, so the following two methods are provided as a 'quick' way of accessing parameters and other keys respectively:","category":"page"},{"location":"manual/#Base.getindex-Union{Tuple{TKey}, Tuple{FlexiChain{TKey}, TKey}} where TKey","page":"Behind the scenes","title":"Base.getindex","text":"Base.getindex(chain::FlexiChain{TKey}, parameter_name::TKey) where {TKey}\n\nConvenience method for retrieving parameters. Equal to chain[Parameter(parameter_name)].\n\n\n\n\n\n","category":"method"},{"location":"manual/#Base.getindex-Union{Tuple{TKey}, Tuple{FlexiChain{TKey}, Symbol, Any}} where TKey","page":"Behind the scenes","title":"Base.getindex","text":"Base.getindex(chain::FlexiChain{TKey}, section_name::Symbol, key_name::Any) where {TKey}\n\nConvenience method for retrieving non-parameter keys. Equal to chain[Extra(section_name, key_name)].\n\n\n\n\n\n","category":"method"},{"location":"manual/","page":"Behind the scenes","title":"Behind the scenes","text":"Finally, to preserve some semblance of backwards compatibility with MCMCChains.jl, FlexiChains can also be indexed by Symbols. It does so by looking for a unique Parameter or Extra which can be converted to that Symbol.","category":"page"},{"location":"manual/#Base.getindex-Tuple{FlexiChain, Symbol}","page":"Behind the scenes","title":"Base.getindex","text":"Base.getindex(chain::FlexiChain{TKey}, sym_key::Symbol) where {TKey}\n\nThe most convenient method to index into a FlexiChain is using Symbol.\n\nHowever, recall that the keys in a FlexiChain{TKey} are not stored as Symbols but rather as either Parameter{TKey} or Extra. Thus, to access the data corresponding to a Symbol, we first convert all key names (both parameters and other keys) to Symbols, and then check if there is a unique match.\n\nIf there is, then we can return that data. If there are no valid matches, then we throw a KeyError.\n\nIf there are multiple matches: for example, if you have a Parameter(:x) and also an Extra(:some_section, :x), then this method will also throw a KeyError. You will then have to index into it using the actual key.\n\n\n\n\n\n","category":"method"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"FlexiChains.jl provides an information-rich data structure for Markov chains. It is intended as a drop-in (but better) replacement for MCMCChains.jl.","category":"page"},{"location":"whynew/#Why-a-new-package?","page":"Why a new package?","title":"Why a new package?","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"FlexiChains.jl has been designed from the ground up to address existing limitations of MCMCChains.jl.","category":"page"},{"location":"whynew/#The-fundamental-difference","page":"Why a new package?","title":"The fundamental difference","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Under the hood, MCMCChains.jl uses AxisArrays.AxisArray as its data structure. Specifically, this allows it to store data in a compact 3-dimensional matrix, and index into the matrix using Symbols.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"The downside of this is that it enforces a key type of Symbol and a value type of Tval<:Real. This means that, for example, if you have a model with vector-valued parameters (like x above), the vectors will be split up into their individual elements before being stored in the chain.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"This is the core of how MCMCChains and FlexiChains differ, and all of the behaviour shown below stems from this.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"To illustrate this, let's sample from a Turing model and store the results in both MCMCChains.Chains and FlexiChains.VNChain.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"using Turing\nusing MCMCChains: Chains\nusing FlexiChains: VNChain, VarName, @varname\nusing Random: Xoshiro\nusing PDMats: PDMats\n\nTuring.setprogress!(false)\n\n@model function f(x)\n    sigma ~ truncated(Normal(0, 1); lower=0)\n    chol ~ LKJCholesky(3, 1.0)\n    corr := PDMats.PDMat(chol)\n    mu ~ MvNormal(zeros(3), sigma^2 * I)\n    return x ~ MvNormal(mu, corr)\nend\n\nmodel = f(randn(Xoshiro(468), 3))","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"The default chain type for Turing's sample is still MCMCChains.Chains; we just specify it here for clarity.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"mcmc = sample(Xoshiro(468), model, NUTS(), 100; chain_type=Chains)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Because FlexiChains does not enforce a key type, you are technically required to specify the key type of the chain as a type parameter. You could, for example, write FlexiChains.FlexiChain{DynamicPPL.VarName}. But since this is really the main use case of FlexiChains, we provide a convenient alias for this, FlexiChains.VNChain.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"flexi = sample(Xoshiro(468), model, NUTS(), 100; chain_type=VNChain)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Here, we expect the following parameters to be present in the chain:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"sigma is a scalar;\nchol is a Cholesky factor which contains a 3×3 lower triangular matrix;\ncorr is a 3×3 correlation matrix, which is a positive-definite matrix;\nmu is a length-3 vector.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Let's test first that both chains contain the same values for sigma. (Some fiddling is required because mcmc[:sigma] returns an AxisArray with a 100×1 matrix, while flexi[:sigma] returns a 100-element vector.)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"vec(mcmc[:sigma].data) == flexi[@varname(sigma)]","category":"page"},{"location":"whynew/#Indexing-keys","page":"Why a new package?","title":"Indexing keys","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"There is already one difference here: when indexing into MCMCChains you need to use a Symbol or String, whereas with FlexiChains you can use the original VarName.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"If you think this is too verbose, fret not! FlexiChains also lets you use Symbols (mainly for compatibility with MCMCChains):","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"flexi[:sigma] == flexi[@varname(sigma)]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"The rest of this page uses VarNames, but you can mentally replace them with Symbols if you prefer.","category":"page"},{"location":"whynew/#Accessing-vector-valued-parameters","page":"Why a new package?","title":"Accessing vector-valued parameters","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Suppose you want to access the value of mu in the first iteration.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"With FlexiChains, you can do this directly as:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"flexi[:mu][1]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"With MCMCChains, because mu has been split up into its constituent elements, you need to do:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"[mu[1] for mu in (mcmc[\"mu[1]\"], mcmc[\"mu[2]\"], mcmc[\"mu[3]\"])]","category":"page"},{"location":"whynew/#Accessing-parameters-with-even-more-special-types","page":"Why a new package?","title":"Accessing parameters with even more special types","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Now suppose you want to extract the sampled values of chol and corr, and check that","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"# This code block isn't executed because we haven't defined `chols` and `corrs`\nfor (chol, corr) in zip(chols, corrs)\n    chol == cholesky(corr) || error(\"oops\")\nend","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"The question is of course how one can obtain the vectors chols and corrs from the chain. With FlexiChains, you can do this directly as:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"chols = flexi[:chol]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"and likewise for :corr.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"On the other hand, with MCMCChains, reconstructing the chols becomes a non-trivial task:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"using LinearAlgebra\n\nchols = map(1:length(mcmc)) do i\n    c = Cholesky(LowerTriangular(zeros(3, 3)))\n    for j in 1:3\n        for k in 1:j\n            c.L[j, k] = mcmc[\"chol.L[$j, $k]\"][i]\n        end\n    end\n    c\nend","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"and similarly for the corrs (which we won't demonstrate here).","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"In general the point is that in any situation where you want to work with the actual types of the parameters, rather than their individual elements, FlexiChains makes this much easier.","category":"page"},{"location":"whynew/#Accessing-individual-elements","page":"Why a new package?","title":"Accessing individual elements","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Sometimes maybe you really want to access just mu[2] without any reference to mu[1] or mu[3].","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Because FlexiChains stores the entire vector mu, you will then need to index into it:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"[mu_sample[2] for mu_sample in flexi[:mu]]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"In MCMCChains you can of course do","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"mcmc[\"mu[2]\"]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Note, though, that MCMCChains requires you to pass a string \"2\" to get the second variable. Of course, if you have an integer 2 this is quite easily done with interpolation, but I would argue from a readability perspective it's much clearer to index with an integer 2 rather than a string.","category":"page"},{"location":"whynew/#Other-types-of-data","page":"Why a new package?","title":"Other types of data","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Let's say we define a weird new discrete distribution which samples from the two structs Duck() and Goose().","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"(Why would you want to do this? Well, why shouldn't you be able to do it? Turing's docs tell you how to define your own distributions, but it doesn't say that you have to use numbers. The point is that FlexiChains doesn't force you to stick only to distributions over numbers.)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"using Distributions, Random\n\nabstract type Bird end\nstruct Duck <: Bird end\nstruct Goose <: Bird end\n\nstruct BirdDist <: Distributions.DiscreteUnivariateDistribution end\nDistributions.rand(rng::Random.AbstractRNG, ::BirdDist) = rand(rng) < 0.3 ? Duck() : Goose()\nDistributions.logpdf(::BirdDist, x::Duck) = log(0.3)\nDistributions.logpdf(::BirdDist, x::Goose) = log(0.7)\n\n@model function f()\n    return x ~ BirdDist()\nend\n\n# A bit more boilerplate is needed here to actually make it work with Turing.\nusing Bijectors, DynamicPPL\nDynamicPPL.tovec(b::Bird) = [b]\nBijectors.logabsdetjac(::typeof(identity), ::Bird) = 0.0\n\n# mcmc = sample(f(), MH(), 100; chain_type=VNChain)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"TODO: Fix the example above, it fails with typed VarInfo because typed VarInfo expects Real things to put into Metadata. SimpleVarInfo would work. See https://github.com/TuringLang/DynamicPPL.jl/pull/1003","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Well, that worked quite nicely with FlexiChains.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"MCMCChains on the other hand would completely error here because it requires all its values to be Real. (To be precise, it requires all its values to be convertable to Real. So a distribution over Char works, even though Char <: Real is false, because Chars can be converted to Real.)","category":"page"},{"location":"whynew/#No-need-to-avoid-reserved-names","page":"Why a new package?","title":"No need to avoid reserved names","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"When sampling from a Turing model with MCMCChains as the output format, some metadata (non-parameter keys) such as lp are added to the chain. If your model contains a variable called lp, sampling will still work but odd things will happen. For example, it will look as if your chain does not actually have any variables:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"@model function lp_model()\n    return lp ~ Normal()\nend\n\nmchain = sample(Xoshiro(468), lp_model(), NUTS(), 100; chain_type=Chains)\ndescribe(mchain)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"When you index into mchain[:lp], how do you know whether it refers to the lp variable in your model or the lp metadata key?","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"any(mchain[:lp] .> 0)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Well, since there are some positive values, it has to be the parameter, because the metadata lp = logpdf(Normal(), value_of_lp_parameter) is always negative. But you didn't know that when you tried to index into it, you had to reverse engineer it.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"Besides, if you actually want the log-density, it's now gone. Tough luck. (You can get it back with logjoint(lp_model(), mchain) if you want.)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"HMC samplers further include extra metadata such as hamiltonian_energy, and in general any sampler can include any kind of extra metadata it wants. As a user, you have no way of knowing what these names are, and you have to avoid using them in your model, which is quite unfair.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"FlexiChains circumvents this entirely since it stores these separately as Parameter(@varname(lp)) and Extra(:logprobs, :lp).","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"fchain = sample(Xoshiro(468), lp_model(), NUTS(), 100; chain_type=VNChain)","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"You will of course run into ambiguities if you simply attempt to index the chain with [:lp], because both the Parameter(@varname(lp)) and the Extra(:logprobs, :lp) exist.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"fchain[:lp]\n# This code block isn't run because it would throw the following error:\n# ArgumentError: multiple keys correspond to symbol :lp.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"but you can still access the value using the original value of the Parameter:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"fchain[@varname(lp)]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"and the corresponding metadata:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"fchain[:logprobs, :lp]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"and indeed we can check that these do align:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"logpdf.(Normal(), fchain[@varname(lp)]) ≈ fchain[:logprobs, :lp]","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"TODO pretty-printing / summary stats","category":"page"},{"location":"whynew/#For-DynamicPPL-developers","page":"Why a new package?","title":"For DynamicPPL developers","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"TODO Write about how this makes life a lot easier for things like predict.","category":"page"},{"location":"whynew/#Design-goals","page":"Why a new package?","title":"Design goals","text":"","category":"section"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"My main design goals for FlexiChains.jl were twofold:","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"To provide a rich data structure that can more faithfully represent the outputs from sampling with Turing.jl.\nThe restriction of MCMCChains.jl to Symbol keys and Real values means that round-trip conversion is a lossy operation. Consider, e.g., the predict(::Model, ::MCMCChains.Chains) function, which is used to sample from the posterior predictive distribution. This requires one to extract the values from the chain and insert them back into the model (or technically the VarInfo).\nHowever, in general one cannot reconstruct a vector x from its constituent elements x[1], x[2], ... as we do not know the appropriate length of the vector! The current implementation of this function in DynamicPPL.jl thus has to, essentially, insert all the elements it can find and hope for the best.\nEssentially, MCMCChains' data structure forces packages like Turing.jl and DynamicPPL.jl to include workarounds to deal with the limitations of the chains package.\nTo create a robust and readable codebase.\nMuch Julia code is written with the intention of efficiency or versatility, often sacrificing clarity in the process. This is usually acceptable when creating simple scripts. However, I believe that library code should be held to a (much) higher standard.\nIn particular, I consider the overuse of multiple dispatch to be a major source of confusion in Julia code. Types cannot be fully inferred at compile time (and even when they can, it requires packages such as JET.jl, which do not (yet) have convenient language server integrations). This means that when reading code, one cannot easily determine which method is being called.\nA prime example is the Chains constructor in MCMCChains.jl. methods(Chains) returns 11 methods, and each time you see a call to Chains(...) you need to figure out which of these 11 it is. In writing FlexiChains I have made a conscious choice to create only two inner constructors for FlexiChain.","category":"page"},{"location":"whynew/","page":"Why a new package?","title":"Why a new package?","text":"In particular, notice that performance is not one of my considerations. In my opinion, performance is only a minor concern for FlexiChains.jl, because the main bottleneck in Bayesian inference is the sampling, not how fast one can construct or index into a chain.","category":"page"}]
}
